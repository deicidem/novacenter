$spacing-values-classes: (
	"0",
	"px",
	"0.5",
	"1",
	"1.5",
	"2",
	"2.5",
	"3",
	"3.5",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
	"10",
	"11",
	"12",
	"16",
	"64"
);

$breakpoints: (
	"sm": 576px,
	"md": 768px,
	"lg": 992px,
	"xl": 1200px,
	"xxl": 1400px,
);

@function convert-range-to-decimal($range) {
	$range-list: split($range, "-");
	$start: nth($range-list, 1);
	$end: nth($range-list, 2);

	@return ($start + $end) / 10;
}

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
	@if type-of($value) == "number" {
		@return $value;
	} @else if type-of($value) != "string" {
		$_: log("Value for `to-number` should be a number or a string.");
	}

	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == "-";
	$numbers: (
		"0": 0,
		"1": 1,
		"2": 2,
		"3": 3,
		"4": 4,
		"5": 5,
		"6": 6,
		"7": 7,
		"8": 8,
		"9": 9,
	);

	@for $i from if($minus, 2, 1) through str-length($value) {
		$character: str-slice($value, $i, $i);

		@if not(index(map-keys($numbers), $character) or $character == ".") {
			@return to-length(if($minus, -$result, $result), str-slice($value, $i));
		}

		@if $character == "." {
			$digits: 1;
		} @else if $digits == 0 {
			$result: $result * 10 + map-get($numbers, $character);
		} @else {
			$digits: $digits * 10;
			$result: $result + calc(map-get($numbers, $character) / $digits);
		}
	}

	@return if($minus, -$result, $result);
}

///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
	$units: (
		"px": 1px,
		"cm": 1cm,
		"mm": 1mm,
		"%": 1%,
		"ch": 1ch,
		"pc": 1pc,
		"in": 1in,
		"em": 1em,
		"rem": 1rem,
		"pt": 1pt,
		"ex": 1ex,
		"vw": 1vw,
		"vh": 1vh,
		"vmin": 1vmin,
		"vmax": 1vmax,
	);

	@if not index(map-keys($units), $unit) {
		$_: log("Invalid unit `#{$unit}`.");
	}

	@return $value * map-get($units, $unit);
}

@function escape-decimal($str) {
	@return if(str-index($str, ".") == null, $str, str-insert($str, "\\", str-index($str, ".")));
}

$spacing-values: ();
@each $value in $spacing-values-classes {
	$newValue: "";
	@if ($value == "0") {
		$newValue: 0 !important;
	} @else if ($value == "px") {
		$newValue: 1px !important;
	} @else {
		$newValue: calc(to-number($value) * 0.25rem) !important;
	}
	$spacing-values: map-merge(
		$spacing-values,
		(
			escape-decimal($value): $newValue,
		)
	);
}

@each $name, $value in $spacing-values {
	.m-#{$name} {
		margin: $value;
	}

	.mt-#{$name} {
		margin-top: $value;
	}

	.mr-#{$name} {
		margin-right: $value;
	}

	.mb-#{$name} {
		margin-bottom: $value;
	}

	.ml-#{$name} {
		margin-left: $value;
	}

	.mx-#{$name} {
		margin-left: $value;
		margin-right: $value;
	}

	.my-#{$name} {
		margin-top: $value;
		margin-bottom: $value;
	}

	.p-#{$name} {
		padding: $value;
	}

	.pt-#{$name} {
		padding-top: $value;
	}

	.pr-#{$name} {
		padding-right: $value;
	}

	.pb-#{$name} {
		padding-bottom: $value;
	}

	.pl-#{$name} {
		padding-left: $value;
	}

	.px-#{$name} {
		padding-left: $value;
		padding-right: $value;
	}

	.py-#{$name} {
		padding-top: $value;
		padding-bottom: $value;
	}
	@each $bp-name, $bp-value in $breakpoints {
		@media (min-width: $bp-value) {
			.m-#{$bp-name}-#{$name} {
				margin: $value;
			}

			.mt-#{$bp-name}-#{$name} {
				margin-top: $value;
			}

			.mr-#{$bp-name}-#{$name} {
				margin-right: $value;
			}

			.mb-#{$bp-name}-#{$name} {
				margin-bottom: $value;
			}

			.ml-#{$bp-name}-#{$name} {
				margin-left: $value;
			}

			.mx-#{$bp-name}-#{$name} {
				margin-left: $value;
				margin-right: $value;
			}

			.my-#{$bp-name}-#{$name} {
				margin-top: $value;
				margin-bottom: $value;
			}

			.p-#{$bp-name}-#{$name} {
				padding: $value;
			}

			.pt-#{$bp-name}-#{$name} {
				padding-top: $value;
			}

			.pr-#{$bp-name}-#{$name} {
				padding-right: $value;
			}

			.pb-#{$bp-name}-#{$name} {
				padding-bottom: $value;
			}

			.pl-#{$bp-name}-#{$name} {
				padding-left: $value;
			}

			.px-#{$bp-name}-#{$name} {
				padding-left: $value;
				padding-right: $value;
			}

			.py-#{$bp-name}-#{$name} {
				padding-top: $value;
				padding-bottom: $value;
			}
		}
	}
}

.text-primary {
	color: $primary !important;
}

.text-white {
	color: #fff !important;
}

.text-right {
	text-align: right;
}

.bg-light-blue {
	background-color: $light-blue !important;
}

.bg-purple-blue {
	background-color: $purple-blue !important;
}

.white-space-nowrap {
	white-space: nowrap;
}

$weight: (
	"thin": 100,
	"extra-light": 200,
	"light": 300,
	"regular": 400,
	"medium": 500,
	"semi-bold": 600,
	"bold": 700,
	"extra-bold": 800,
	"black": 900,
);

@each $name, $value in $weight {
	.text-weight-#{$name} {
		font-weight: $value !important;
	}
}
